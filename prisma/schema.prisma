generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

  // -------------------
  // Permissions
  // -------------------
  model Permission {
    id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    permission_key String  @db.VarChar(50)
    description    String?

    roles_permissions RolePermission[]

    @@map("permissions")
  }

  // -------------------
  // Roles
  // -------------------
  model Role {
    id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    role_name  String           @unique @db.VarChar(20)
    created_at DateTime?        @default(now()) @db.Timestamptz(6)
    updated_at DateTime?        @default(now()) @db.Timestamptz(6)

    users      User[]
    roles_permissions RolePermission[]

    @@map("roles")
  }

  // -------------------
  // Users
  // -------------------
  model User {
    id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String    @db.VarChar(40)
    email           String    @unique @db.VarChar(40)
    hashed_password String    @db.VarChar(100)
    phone           String?   @db.VarChar(30)
    role_id         String?   @db.Uuid
    created_at      DateTime? @default(now()) @db.Timestamptz(6)
    updated_at      DateTime? @default(now()) @db.Timestamptz(6)
    is_active       Status    @default(active)

    role     Role?     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    contents Content[]

    @@map("users")
  }

  enum Status {
    active
    suspended
    deleted
  }

  // -------------------
  // Role â†” Permission (join table)
  // -------------------
  model RolePermission {
    role_id       String @db.Uuid
    permission_id String @db.Uuid

    role       Role        @relation(fields: [role_id], references: [id], onDelete: Cascade)
    permission Permission  @relation(fields: [permission_id], references: [id], onDelete: Cascade)

    @@id([role_id, permission_id])
    @@index([permission_id])
    @@map("roles_permissions")
  }

  // -------------------
  // Content
  // -------------------
 model Content {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authorId    String        @db.Uuid @map("author_id")
  author      User          @relation(fields: [authorId], references: [id])
  title       String
  description String
  searchVector Unsupported("tsvector")? // For full-text search on title and description
  contentType ContentType   @map("content_type")
  metadata    Json
  status      ContentStatus @default(DRAFT)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("content")
  @@index([metadata(ops: JsonbPathOps)], type: Gin) // Retaining existing GIN index for metadata
}

  // -------------------
  // Enums
  // -------------------
  enum ContentType {
    ARTICLE
    VIDEO
    IMAGE

    @@map("content_type")
  }

  enum ContentStatus {
    DRAFT
    PUBLISHED

    @@map("content_status")
  }
